on:
  push:
    branches:
      - main

name: Build and Deploy a Container
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: mgmt590-assignment3-flask
  REGION: us-central1
  CLOUD_SQL_CONNECTION_NAME: assignment-3-315306:us-central1:cloud-sql-postgres
  DB_HOST: '35.232.200.40:5432'
  DB_NAME: 'postgres-prodscale'
  DB_USER: 'postgres' 
  DB_PASS: 'prodscale'
  


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
        
    - name: Checkout
      uses: actions/checkout@v2
      
    # Setup gcloud CLI
      
    - name: Google Cloud SQL Proxy
      run:
      using: composite
        steps:
          - name: Start Google Cloud SQL Proxy
            shell: bash
            run: |
              # write google application credentials to a temporary file to be used inside the container
              mkdir -p /tmp/gce-cloudsql-proxy
              echo '${{ inputs.creds }}' > /tmp/gce-cloudsql-proxy/key.json
              # start container
              docker run -d --net host --name gce-cloudsql-proxy --restart on-failure \
              -v /tmp/gce-cloudsql-proxy:/tmp/gce-cloudsql-proxy \
              gcr.io/cloudsql-docker/gce-proxy:${{ inputs.proxy_version }} \
              /cloud_sql_proxy \
                -credential_file /tmp/gce-cloudsql-proxy/key.json \
                -dir /tmp \
                -instances=${{ inputs.instance }}=tcp:35.232.200.40:5432
              # wait until connections are accepted
              sleep 3
              isready=0
              for i in {1..10}; do
                echo "Wait for connections to be ready ... $i/10"
                (${{ github.action_path }}/wait-for-it.sh --quiet --timeout=3 --host=35.232.200.40 --port=5432 || exit $?) && true # escape bash's pipefail
                isready=$?
                if [[ $isready -eq 0 ]]; then
                  break
                fi
                sleep 2
              done
              # print container logs
              docker logs gce-cloudsql-proxy
              # exit with error code if we couldn't connect
              if [[ $isready -ne 0 ]]; then
                exit $isready 
              fi

    - name: Setup Cloud SDK
      env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT }}
          SERVICE: mgmt590-assignment3-flask
          REGION: us-central1

      uses: google-github-actions/setup-gcloud@master
      with:

      
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true  # Set to true to authenticate the Cloud Run action

    - name: Authorize Docker push
      env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT }}
          SERVICE: mgmt590-assignment3-flask
          REGION: us-central1

      run: gcloud auth configure-docker

    - name: Build and Push Container
      env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT }}
          SERVICE: mgmt590-assignment3-flask
          REGION: us-central1

      run: |-
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} .
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
        
        
    - name: Deploy to Cloud Run
      env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT }}
          SERVICE: mgmt590-assignment3-flask
          REGION: us-central1

      id: deploy
      uses: google-github-actions/deploy-cloudrun@v0.4.0
      with:
        service: ${{ env.SERVICE }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
        region: ${{ env.REGION }}
        


    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}
